#!/usr/bin/perl

use strict;
use warnings;

use Cwd 'abs_path';
use File::Basename;
use File::Find;
use File::Slurp;              # perl-File-Slurp
use Getopt::Long;
use Parallel::ForkManager;    # perl-Parallel-ForkManager
use Term::ANSIColor qw(:constants);

my $usage = <<EOF;

- Show expander topology

    encctl --topology

- Show slot status

    encctl --show

- Show S.M.A.R.T attribute (SATA)

    encctl --smart

- Show S.M.A.R.T error log in N days. (SATA)

    encctl --smarterror N

- Check Total uncorrected errors (SAS)

    encctl --unc

- Locate a disk drive on an enclosure

    encctl --locate 3:0:0       # locate 3:0:0
    encctl --locate 3:0         # locate 3:0:*
    encctl --locate all         # locate *:*:*
    encctl --locate_off 3:0:0   # unlocate 3:0:0
    encctl --locate_off 3:0     # unlocate 3:0:*
    encctl --locate_off all     # unlocate *:*:*

EOF

sub sort_alias {
    return sort { ( split /:/, $a )[0] cmp( split /:/, $b )[0] }
        sort { ( split /:/, $a )[1] <=> ( split /:/, $b )[1] } @_;
}

my %sysfs;

sub prepare {
    my $slot;
    if (m{^Slot (\d+)\z}) {
        $slot = $1 - 1;    # Supermicro SAS2
    }
    elsif (m{^Slot0*(\d+)\z}) {
        $slot = $1;        # Supermicro SAS3
    }
    else {
        return;
    }
    $File::Find::dir =~ m{(.*(end_device-[\d:]+))} or return;
    chomp( my $enc = read_file "$1/sas_device/$2/enclosure_identifier" );
    push @{ $sysfs{"$enc:$slot"} }, $File::Find::name;
}

my %e2s;
my @topology;

sub topology {
    $File::Find::name =~ m{/enclosure\z} or return;
    $File::Find::name =~ m{(.*/(expander-[\d:]+)/.*/(end_device-[\d:]+))}
        or return;
    chomp( $e2s{$2} = read_file("$1/sas_device/$3/enclosure_identifier") );
    push @topology, [ $File::Find::name =~ m{/(expander-[\d:]+)}g ];
}

my %opt;

GetOptions(
    "topology"         => \$opt{topology},
    "show"             => \$opt{show},
    "smart"            => \$opt{smart},
    "smarterror=i"     => \$opt{smarterror},
    "unc"              => \$opt{unc},
    "locate=s{1,}"     => \@{ $opt{locate} },
    "locate_off=s{1,}" => \@{ $opt{locate_off} },
) or die("$usage");

{
    my @check;
    foreach ( sort keys %opt ) {
        if ( ref $opt{$_} ) {
            push @check, $_ if @{ $opt{$_} } > 0;
        }
        elsif ( defined $opt{$_} ) {
            push @check, $_;
        }
    }
    if ( @check > 1 ) {
        die sprintf "$0: multiple option [%s] specifed.\n", join ", ", @check;
    }
}

if ( $opt{topology} ) {
    find( \&topology, "/sys/devices" );
    my %uniq;
    foreach (@topology) {
        my $a = join " => ", map { $e2s{$_} } @{$_};
        print "$a\n" unless exists $uniq{$a};
        $uniq{$a} = 1;
    }
}
elsif ( $opt{show} ) {
    find( \&prepare, map { abs_path $_ } </sys/class/enclosure/*> );
    foreach ( sort_alias keys %sysfs ) {
        print "$_\t";
        my %h;
        foreach my $key (qw/active fault locate/) {
            foreach my $i ( 0 .. $#{ $sysfs{$_} } ) {
                $h{$key} |= read_file("$sysfs{$_}[$i]/$key");
            }
        }
        foreach my $key (qw/active fault locate/) {
            printf "%s\t => %d\t", $key, $h{$key};
        }
        %h = ();
        foreach my $i ( 0 .. $#{ $sysfs{$_} } ) {
            chomp( my $s = read_file("$sysfs{$_}[$i]/status") );
            $h{$s} = 1;
        }
        printf "status => %s\n", join ' | ', keys %h;
    }
}
elsif ( $opt{smart} ) {
    find( \&prepare, map { abs_path $_ } </sys/class/enclosure/*> );
    my $pm = Parallel::ForkManager->new(8);
    my %SMART_Attributes;
    $pm->run_on_finish( sub { $SMART_Attributes{ $_[2] } = $_[5] } );
    $pm->run_on_start( sub { printf STDERR "Checking %s\n", $_[1] } );
    foreach ( sort_alias keys %sysfs ) {
        foreach my $i ( 0 .. $#{ $sysfs{$_} } ) {
            my $dev = <$sysfs{$_}[$i]/device/block/sd*>;
            next unless defined $dev;
            $dev =~ s{.*/}{};
            unless ( read_file("$sysfs{$_}[$i]/device/vendor") =~ /^ATA/ ) {
                print STDERR "Checking $_\t=> not SATA\n";
                last;
            }

            # Forks and returns the pid for the child:
            my $pid = $pm->start($_) and last;
            chomp( my @smartctl
                    = qx{exec smartctl -A /dev/$dev 2> /dev/null} );
            $pm->finish( $?, \@smartctl );    # Terminates the child process
        }
    }
    $pm->wait_all_children;

    my @target
        = qw/Reallocated_Sector_Ct Reported_Uncorrect Command_Timeout Current_Pending_Sector Offline_Uncorrectable/;
    print "NAME\t\t\t", join " ", @target, "\n" if %SMART_Attributes;
    foreach ( sort_alias keys %SMART_Attributes ) {
        map {s/^\s+//} @{ $SMART_Attributes{$_} };
        my %attr = map { ( split /\s+/, $_, 10 )[ 1, 9 ] }
            @{ $SMART_Attributes{$_} };
        print "$_\t";
        foreach my $target (@target) {
            my $value = defined $attr{$target} ? $attr{$target} : "N/A";
            if ( -t STDOUT && $attr{$target} ) {
                print BOLD $value, RESET;
            }
            else {
                print $value;
            }
            print " " x ( 1 + length($target) - length($value) );
        }
        print "\n";
    }
}
elsif ( $opt{smarterror} ) {
    find( \&prepare, map { abs_path $_ } </sys/class/enclosure/*> );

    my $pm = Parallel::ForkManager->new(8);
    my %output;
    $pm->run_on_finish( sub { $output{ $_[2] } = $_[5] } );
    $pm->run_on_start( sub { printf STDERR "Checking %s\n", $_[1] } );

    foreach ( sort_alias keys %sysfs ) {
        foreach my $i ( 0 .. $#{ $sysfs{$_} } ) {
            my $dev = <$sysfs{$_}[$i]/device/block/sd*>;
            next unless defined $dev;
            $dev =~ s{.*/}{};
            unless ( read_file("$sysfs{$_}[$i]/device/vendor") =~ /^ATA/ ) {
                print STDERR "Checking $_\t=> not SATA\n";
                last;
            }

            # Forks and returns the pid for the child:
            my $pid      = $pm->start($_) and last;
            my @output   = ("smartctl -x -d sat /dev/disk/by-vdev/$_\n");
            my @smartctl = qx{smartctl -i -A -l error /dev/$dev 2> /dev/null};
            if ( $? >> 8 & 2**6 ) {
                push @output, "\n";
                map {s/^/\t/mg} @smartctl;
                my ( $pow, $echo );
                foreach (@smartctl) {
                    if (/^\t(?:Device Model|Serial Number):/) {
                        push @output, $_;
                        next;
                    }
                    if (/Power_On_Hours.*\s(\d+)/) {
                        $pow = $1;
                        push @output,
                            sprintf
                            "\n\tPower_On_Hours: %d hours (%d days + %d hours)\n\n",
                            $pow, $pow / 24, $pow % 24;
                        next;
                    }
                    if (/power-on lifetime: (\d+) hours/) {
                        if ( $1 > $pow - 24 * $opt{smarterror} ) {
                            $echo = 1;
                        }
                        else {
                            $echo = 0;
                        }
                    }
                    push @output, $_ if $echo;
                }
            }
            splice @output, 1 unless grep {/power-on lifetime:/} @output;
            $pm->finish( $?, \@output );    # Terminates the child process
        }
    }
    $pm->wait_all_children;

    foreach ( sort_alias keys %output ) {
        print @{ $output{$_} };
    }
}
elsif ( $opt{unc} ) {
    find( \&prepare, map { abs_path $_ } </sys/class/enclosure/*> );

    my $pm = Parallel::ForkManager->new(8);
    my %output;
    $pm->run_on_finish( sub { $output{ $_[2] } = $_[5] } );
    $pm->run_on_start( sub { printf STDERR "Checking %s\n", $_[1] } );

    foreach ( sort_alias keys %sysfs ) {
        foreach my $i ( 0 .. $#{ $sysfs{$_} } ) {
            my $dev = <$sysfs{$_}[$i]/device/block/sd*>;
            next unless defined $dev;
            $dev =~ s{.*/}{};
            if ( read_file("$sysfs{$_}[$i]/device/vendor") =~ /^ATA/ ) {
                print STDERR "Checking $_\t=> not SAS\n";
                last;
            }

            # Forks and returns the pid for the child:
            my $pid = $pm->start($_) and last;
            my @error = qx{smartctl -l error /dev/$dev};
            my $unc;
            foreach ( grep {/^(?:read|write|verify):/} @error ) {

                # check Total uncorrected errors
                $unc |= ( (split)[7] );
            }
            my @output = ("smartctl -x -d scsi /dev/disk/by-vdev/$_\n");
            if ($unc) {
                my @info = grep {/^(?:Vendor|Product|Serial number):/}
                    qx{smartctl -i /dev/$dev};
                splice @error, 0, 3;
                map {s/^/\t/} @info, @error;
                push @output, "\n", @info, "\n", @error;
            }
            $pm->finish( 0, \@output );    # Terminates the child process
        }
    }
    $pm->wait_all_children;

    foreach ( sort_alias keys %output ) {
        print @{ $output{$_} };
    }
}
elsif ( @{ $opt{locate} } ) {
    my @target;
    find( \&prepare, map { abs_path $_ } </sys/class/enclosure/*> );
    foreach ( @{ $opt{locate} } ) {
        my $quotemeta = quotemeta;
        if ( exists $sysfs{$_} ) {
            push @target, $_;
        }
        elsif ( grep {/^$quotemeta:/} keys %sysfs ) {
            push @target, grep {/^$quotemeta:/} sort_alias keys %sysfs;
        }
        elsif ( $_ eq 'all' ) {
            @target = sort_alias keys %sysfs;
            last;
        }
        else {
            die "$_ is not exists\n";
        }
    }
    foreach (@target) {
        foreach my $i ( 0 .. $#{ $sysfs{$_} } ) {
            my $filename = "$sysfs{$_}[$i]/locate";
            if ( write_file( $filename, 1 ) ) {
                print "$_\[$i] => 1\n";
            }
            else {
                print STDERR "Can't write to $filename\n";
            }
        }
    }
}
elsif ( @{ $opt{locate_off} } ) {
    my @target;
    find( \&prepare, map { abs_path $_ } </sys/class/enclosure/*> );
    foreach ( @{ $opt{locate_off} } ) {
        my $quotemeta = quotemeta;
        if ( exists $sysfs{$_} ) {
            push @target, $_;
        }
        elsif ( grep {/^$quotemeta:/} keys %sysfs ) {
            push @target, grep {/^$quotemeta:/} sort_alias keys %sysfs;
        }
        elsif ( $_ eq 'all' ) {
            @target = sort_alias keys %sysfs;
            last;
        }
        else {
            die "$_ is not exists\n";
        }
    }
    foreach (@target) {
        foreach my $i ( 0 .. $#{ $sysfs{$_} } ) {
            my $filename = "$sysfs{$_}[$i]/locate";
            if ( write_file( $filename, 0 ) ) {
                print "$_\[$i] => 0\n";
            }
            else {
                print STDERR "Can't write to $filename\n";
            }
        }
    }
}
else {
    print $usage;
}
